<?php

namespace App\Http\Controllers;

use App\Models\System\Tag;
use Auth;
use Illuminate\Http\Request;
use Spatie\Permission\Exceptions\UnauthorizedException;

class TagController extends Controller
{
    public function __construct()
    {
        parent::__construct(Tag::class);
    }

    public function index(Request $request)
    {
        $parent_response = parent::index($request)->getData(true);
        $array = $parent_response['data'];
        $array_result = [];
        foreach ($array as $item)
            if ($this->validate_lvl($item['id'], true))
                $array_result[] = $item;
        $parent_response['data'] = $array_result;
        return response()->json($parent_response);
    }

    public function update(Request $request, $id)
    {
        $this->validate_lvl($id);
        return parent::update($request, $id);
    }

    public function destroy(Request $request, $id)
    {
        $this->validate_lvl($id);
        return parent::destroy($request, $id); // TODO: Change the autogenerated stub
    }

    public function show(Request $request, $id)
    {
        $this->validate_lvl($id);
        return parent::show($request, $id); // TODO: Change the autogenerated stub
    }

    public function validate_lvl($record_id, $boolean_return = false)
    {
        /** @var Tag $record */
        $record = Tag::findOrFail($record_id);
        $user_lvl = get_user_lvl(Auth::user());
        $required_lvl = (integer)$record->required_lvl;
        if ($user_lvl > $required_lvl) {
            if ($boolean_return)
                return false;
            throw new UnauthorizedException(403, trans("messages.acl.errors.level", [
                'lvl' => $user_lvl,
                'req' => $required_lvl
            ]));
        }
        return true;
    }

}
